#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

const watchDir = path.join(__dirname, '../src');
const debounceTime = 1000;
let timeout;

console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå...');

function runTests() {
  console.log('\nüß™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡πÄ‡∏ó‡∏™...');
  exec('npm run lint', (error, stdout, stderr) => {
    if (error) {
      console.error('‚ùå Lint ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
      return;
    }
    console.log('‚úÖ Lint ‡∏ú‡πà‡∏≤‡∏ô');
    
    exec('npm run build', (error, stdout, stderr) => {
      if (error) {
        console.error('‚ùå Build ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
        return;
      }
      console.log('‚úÖ Build ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    });
  });
}

function watchFiles(dir) {
  fs.readdir(dir, { withFileTypes: true }, (err, files) => {
    if (err) return;

    files.forEach(file => {
      const fullPath = path.join(dir, file.name);
      
      if (file.isDirectory()) {
        watchFiles(fullPath);
      } else if (file.name.endsWith('.tsx') || file.name.endsWith('.ts')) {
        fs.watchFile(fullPath, { interval: 500 }, () => {
          console.log(`üìù ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: ${file.name}`);
          
          clearTimeout(timeout);
          timeout = setTimeout(runTests, debounceTime);
        });
      }
    });
  });
}

watchFiles(watchDir);